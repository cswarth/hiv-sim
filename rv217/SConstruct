#!/usr/bin/env scons
# -*- coding: utf-8 -*-

'''
Scons file for processing RV217 playdata
sequences through BEAST and PRANK in order to infer founding sequence.


NOTE: this SConstruct files does not use NESTLY, and does not simulate
ay data.  It is processing real data from real patients.
'''



import os
import os.path
import glob
import time

from nestly import Nest
from nestly.scons import SConsWrap
from SCons.Script import Environment
from SCons.Action import ActionFactory
import SCons.Util

# Running commands on the cluster sometimes has the unfortunate side-effect of
# letting distributed filesystems get out of sync.  A file that is written on
# the cluster may not be visible on local machines for several seconds.  This
# doesn't happen all the time, and it can be difficult to demonstrate, but it
# often occurs when local and cluster commands manipulate the same file in
# quick succession.  The Wait() action is meant to wait for a file to become
# locally visible after running a command on the cluster (via srun or salloc).
#
# Wait() usage is typically,
# 	target='output.file'
# 	env.Command(target, 'source.file',
#   	        [ "srun some-command <${TARGET}",
#    			   Wait(target)
#				])
#
# This will cause the execution to pause after running 'some-command' until the target shows up on the local machine.
# The target will be polled on a 2-second interval, and the command will fail if the target does not show up within about 10 seconds.




def get_paths_str(dest):
    # If dest is a list, we need to manually call str() on each element
    if SCons.Util.is_List(dest):
        elem_strs = []
        for element in dest:
            elem_strs.append('"' + str(element) + '"')
        return '[' + ', '.join(elem_strs) + ']'
    else:
        return '"' + str(dest) + '"'

# https://github.com/azatoth/scons/blob/73f996e59902d03ec432cc662252aac5fb72f1f8/src/engine/SCons/Defaults.py 
def wait_func(dest):
    SCons.Node.FS.invalidate_node_memos(dest)
    if not SCons.Util.is_List(dest):
        dest = [dest]
    for entry in dest:
        count = 0
        limit = 3
        while not os.path.isfile(entry) or os.stat(entry).st_size == 0:
            print("waiting for {}...".format(entry))
            time.sleep(2)
            count = count + 1
            if count >limit:
                return 1
    return 0

Wait = ActionFactory(wait_func, lambda dir: 'Wait(%s)' % get_paths_str(dir))

environ = os.environ.copy()

for k in ('SLURM_NTASKS', 'SLURM_NPROCS', 'SLURM_NNODES',
          'SLURM_NTASKS_PER_CORE', 'SLURM_CPUS_PER_TASK', 'SLURM_EXCLUSIVE'):
    environ[k] = '1'
environ['SLURM_TIMELIMIT'] = '0-6'

env = Environment(ENV=environ)
env.PrependENVPath('PATH', '../bin')

n = Nest(base_dict={})
w = SConsWrap(n, 'build', alias_environment=env)

# Function to be called to convert each value to a directory label.
def toplevel_label(n):
    return os.path.splitext(os.path.basename(n))[0]


n.add('multiple_alignment', [f for f in glob.glob('../sample_data/playdata/*/*.fasta') ], label_func=toplevel_label)


# create the BEAST config file from sequences extracted from two patient simulations
@w.add_target_with_env(env)
def config_beast(env, outdir, c):
    target = os.path.join(outdir, 'beast_in.xml')
        
    cmd = ("mkbeast_rv217.py  --template  ${SOURCES[0]} ${SOURCES[1]}  >${TARGET}")

    return env.Command(target,
                       [ '../templates/beast_vidd_template.xml', c['multiple_alignment']],
                       cmd)


@w.add_target_with_env(env)
def runbeast(env, outdir, c):
    target = [ os.path.join(outdir, 'ancestralSequences.log'),
               os.path.join(outdir, 'beastout.log'),
               os.path.join(outdir, 'beastout.trees'),
               os.path.join(outdir, 'beastcmd.log') ]
    return env.Command(target,
                       c['config_beast'],
                       [ "srun --output=srun.log beast -working -overwrite -beagle " + os.path.abspath(str(c['config_beast'][0])) + " >${TARGETS[3]} 2>&1",
                         Wait(target)])

@w.add_target_with_env(env)
def mcc(env, outdir, c):
    return env.Command(os.path.join(outdir, 'mcc.tree'),
                        c['runbeast'][2],
                       'treeannotator ${SOURCES} >${TARGET} ')

# nexus2newick fails to parse node names with '/' in them.
# prank fails to parse newick trees sith "'" (\047) in them
@w.add_target_with_env(env)
def prank_guidetree(env, outdir, c):
    return env.Command(os.path.join(outdir, 'guidetree.tree'),
                        c['mcc'],
                       'tr  "/" "-" <${SOURCES} | nexus2newick.py  | tr "-" "/" | tr -d "\047" >${TARGET} ')

@w.add_target_with_env(env)
def prank_dna(env, outdir, c):
    outdir = os.path.join(outdir, 'prank_dna')
    target = [ os.path.join(outdir, 'prank.best.anc.fas'),
               os.path.join(outdir, 'prankcmd.log') ]

    env['output'] = os.path.join(outdir, 'prank')
    cmd = ("srun prank -d=${SOURCES[0]} -t=${SOURCES[1]} -o=${output} -quiet -once -f=fasta -showanc -showtree -showevents -DNA >${TARGETS[1]} 2>&1")
    return env.Command(target,
                       [ c['multiple_alignment'], c['prank_guidetree'] ],
                       [
                           Mkdir(outdir),
                           cmd,
                           Wait(target)
                       ])


# https://github.com/cswarth/hiv-sim/issues/2
# Try out codon PRANK
@w.add_target_with_env(env)
def prank_codon(env, outdir, c):
    outdir = os.path.join(outdir, 'prank_codon')
    target = [ os.path.join(outdir, 'prank.best.anc.fas'),
               os.path.join(outdir, 'prankcmd.log') ]

    env['output'] = os.path.join(outdir, 'prank')
    cmd = ("srun prank -d=${SOURCES[0]} -t=${SOURCES[1]} -o=${output} -quiet -once -f=fasta -showanc -showtree -showevents -codon >${TARGETS[1]} 2>&1")
    return env.Command(target,
                       [ c['multiple_alignment'], c['prank_guidetree'] ],
                       [
                           Mkdir(outdir),
                           cmd,
                           Wait(target)
                       ])




# Align the sequences to an HIV-1 full-length reference.
#
# The bam file produced by codon-sw cannot be imported into IGV. Generates
# "Error encountered querying alignments: java.lang.IndexOutOfBoundsException"
#
# I have not investiated in depth other than to note that if we convert the bam
# file to SAM, then back to BAM, it seems to then import into IGV without
# problems.
@w.add_target_with_env(env)
def bamfile(env, outdir, c):
    target = os.path.join(outdir, 'aligned.bam')
    return env.Command(target,
                       [ '../references/NC_001802.fasta', c['multiple_alignment'] ],
                       [
                           'seqmagick convert --ungap ${{SOURCES[1]}} {outdir}/ungapped.fa'.format(outdir=outdir),
                           'seqmagick convert --cut 1:500 {outdir}/ungapped.fa {outdir}/cut.fa'.format(outdir=outdir),
                           '~/overbaugh/prep_drm/bin/codon-sw -hpfs -7 -q  ${{SOURCES[0]}} {outdir}/cut.fa {outdir}/codonsw.bam;'.format(outdir=outdir),
                           'samtools sort {outdir}/codonsw.bam {outdir}/codonsw.sorted'.format(outdir=outdir),
                           'samtools index {outdir}/codonsw.sorted.bam'.format(outdir=outdir),
                           'samtools view -h {outdir}/codonsw.bam | samtools view -bSh - >${{TARGET}};'.format(outdir=outdir)
                       ])


@w.add_target_with_env(env)
def sortedbam(env, outdir, c):
    target = os.path.join(outdir, 'sample.sorted.bam')
    return env.Command(target,
                       [ c['bamfile'] ],
                       [ 
                         'samtools sort ${{SOURCE}} {}'.format(os.path.splitext(target)[0])
                       ])



@w.add_target_with_env(env)
def bamindex(env, outdir, c):
    index = os.path.join(outdir, 'sample.sorted.bam.bai')
    return env.Command(index,
                       [ c['sortedbam'] ],
                       [ 'samtools index ${SOURCE}' ])

