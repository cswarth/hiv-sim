#!/usr/bin/env scons
# -*- coding: utf-8 -*-

''' 

Scons file for driving Nestly to create a hierachy of directories
and control files that can explore various paramter settings of Santa
and BEAST.

The main idea is to have a hierarchy of directories that vary the
branch lengths of simulated sibling HIV clades.  In addition for each
pair of siblings, we want to vary BEAST parameters to explore the
effect of various evolutionary clock models on the inferrence of
ancestral sequences.

We start with a single sequence fro mwhich we simulat multiple
generations of HIV evolution.  We sample this evolutionaery history at
a certain timepoint, say at generation 400, to create patient1.  Then
we sample the same evolutionary history at a several different
timepoints, say 100, 500, 1000, and 10000 generations, to create
patient2.  Next we create a BEAST configuration that combines the
samples from patient1 ad patient2 and ask it to infer the ancestral
sequence at the MRCA of these sequences.

'''



# Simulations for lcfit
import os
import os.path

from nestly import Nest
from nestly.scons import SConsWrap
from SCons.Script import Environment
from SCons.Action import ActionFactory

environ = os.environ.copy()

for k in ('SLURM_NTASKS', 'SLURM_NPROCS', 'SLURM_NNODES',
          'SLURM_NTASKS_PER_CORE', 'SLURM_CPUS_PER_TASK', 'SLURM_EXCLUSIVE'):
    environ[k] = '1'
environ['SLURM_TIMELIMIT'] = '0-6'

env = Environment(ENV=environ)
env.PrependENVPath('PATH', '../bin')

n = Nest(base_dict={'n_sites': 1000})
w = SConsWrap(n, 'runs', alias_environment=env)

env['SANTAJAR']= os.path.abspath('../lib/santa.jar')

env['LONGEVITY'] = 25000	# number of generations to run SANTA simulation.
env['POPULATION'] = 1000	# static simulated population size

### Add to PATH
### We're going to simulate a call to 'source venv/bin/activate' by adding
### 'venv/bin' to the head of the path.
# if you don't have a virtual environment yet, you can build it with 'make venv'
env['venv'] = '../venv'
env.PrependENVPath('PATH', os.path.join(env['venv'], 'bin'))

# Function to be called to convert each value to a directory label.
def replicate(n):
    return "replicate_"+str(n)

n.add('replicates', range(5), label_func=replicate)

# build the HIV evolutionary history from which we will sample
# the patient #1
donorsantaconfig = env.Command("donor_santa_config.xml",
                       ['../templates/santa_template.xml', '../hiv_pol.fa'],
                       "mksanta.py  -p patient1 ${SOURCES}   >${TARGET}")[0]

@w.add_target_with_env(env)
def donorlineage(env, outdir, c):
    return env.Command(os.path.join(outdir, "donorlineage.fa"),
                       [ donorsantaconfig, env['SANTAJAR'] ],
                       [  # santa will produce output files in its current directory.
                          # so need to change to output directory before execution.
                       Copy('$OUTDIR/', donorsantaconfig),
                       'cd ${OUTDIR} && srun --output=srun.log java -jar ${SANTAJAR} -population=${POPULATION} -longevity=${LONGEVITY} ${SOURCES[0]}',
                       Copy('${TARGET}', '${OUTDIR}/santa_out.fa') ])[0]

# Sample the right host at various
# timepoints along its evolution

# for each right sister clade,
# infer ancestral sequence in two ways - 1) by including the left sister clade, and 2) by inferring over just the right sister clade.

# estimate distance from each inferred sequence to actual root sequence.

# n.add('transmission', [100, 300, 500, 700, 1000, 5000, 10000])
def xmit_label(n):
    return "xmit_"+str(n)
n.add('transmission', [300, 1000, 5000], label_func=xmit_label)

## Extract the founder sequence from the santa config file into a FASTA file.
## This makes it easier for the distance.py script to grab it for comparison.
@w.add_target_with_env(env)
def founder(env, outdir, c):
    founder = os.path.join(outdir, 'founder.fa')
    cmd = ('../bin/fasta_sample.py --fasta-file ${SOURCES[0]} --n-sequences 1 --pattern "_${transmission}_" >${TARGET}')

    return env.Command(founder,
                [ c['donorlineage'] ],
                [ cmd ])


## Create the SANTA config file to found a lineage based on a single sequence selected from the 'transmission' generation of the
## donor lineage.
@w.add_target_with_env(env)
def recipientconfig(env, outdir, c):
    target = os.path.join(outdir, 'recipientconfig.xml')
    return env.Command(target,
                       ['../templates/santa_template.xml', c['founder']],
                       # usage: mksanta -p <prefix> <template_file> <sequences_file> 
                       "mksanta.py  -p patient2 ${SOURCES}  >${TARGET}")


## Use SANTA to generate the recipient lineage based on the 'recipientconfig' configuration file.
@w.add_target_with_env(env)
def recipientlineage(env, outdir, c):
    target = os.path.join(outdir, 'santa_out.fa')
    config = os.path.abspath(str(c['recipientconfig']))
    env['PWD'] = os.getcwd()

    return env.Command(target,
                [ c['recipientconfig'], env['SANTAJAR'] ],
                [ "cd ${TARGET.dir} && srun --output=srun.log java -jar ${SANTAJAR} -population=${POPULATION} -longevity=${LONGEVITY} ${PWD}/${SOURCES[0]} && while [ ! -s ${TARGET.file} ]; do echo waiting for ${TARGET}; sleep 2; done"])[0]



# calculate timepoints (measured in generations) at which to sample the donor
# and recipient.
#
# At this point we have already created a long donor lineage, we have
# identified `transmission` points, and for each transmission point we have
# created a long recipient lineage founded on a single sequence taken from the
# donor.  Both donor and recipient lineages have sampled sequences from their
# populations at every 100 generations.
#
# Now we need to pick timepoints at which to sample both donor and
# recipient lineages for founder inference.  We could just pick some static
# timepoints, but there should be some rationale behind the selection, and the
# selected timepoints should cover the entire lineage.  Also static points
# would have to be adjusted by hand if total longevity were to change.
#
# We know we want to sample 'n' points between the transmission event and the
# end of the donor lineage.  Start with a geometric series of timepoints
# [a*(r^i) for i in 0..n].  'n' is fixed, 'a' is a fixed multiplier, 'r' is
# calculated so the last timepoint falls exactly at end of the lineage.
# Constrain these values to fall on 100-generation boundaries where the lineage
# has been previously sampled.  Cutoff the series at the maximum longevity.
# Finally add in a couple of special timepoints at the beginning.
#
# Because the donor timepoints are adjusted to fit between the transmission
# time and the maximum donor lineage, we need a separate series of points for
# each transmission event.  That is, the 'r' value will be different for each
# transmission point so the 'n' points fit within the time remaining between
# transmission and end of lineage.
#
def calculate_donor_timepoints(c):
    a=300	# how fast sampling curve should grow
    n = 10	# number of points in the series.

    # calculate base of exponent so curve intersects LONGEVITY
    # at the last point in the series
    r = ((env['LONGEVITY']-c['transmission'])/a) ** (1./(n-1))

    # calculate exponentially increasing timepoints
    series = [a*pow(r,i) for i in range(n)]
    
    # round down to nearest sample point (every 100 generations)
    series = [int(round(v/100)*100) for v in series]

    # adjust sample times to come after transmission event
    #series = [x+c['transmission'] for x in series]

    # add timepoint coincident with the transmission event
    #series =  [ c['transmission'] ] + series
    series =  [ 0 ] + series

    # sanity checks.
    assert(max(series) <= env['LONGEVITY'])	# not too big
    assert(len(set(series)) == len(series)) # no duplicates

    # add special 'nodonor' timepoint meaning don't include donor info at all,
    series =  [ "nodonor" ] + series
        
    # print("Donor timepoints = {}".format(",".join(map(str,sorted(series)))))
    return(series)

# donor time since transmission
def donor_label(n):
    return "dtst_"+str(n)
n.add('donortime', calculate_donor_timepoints, label_func=donor_label)

# calculate recipient timepoints.
# very similar to calculate_donor_timepoints but does not need to be adjusted by transmission event.
# We reuse the same series of recipient sample points for all transmission events.
def calculate_recipient_timepoints(env):
    a=400
    n = 10
    r = (env['LONGEVITY']/a) ** (1./n)
    series = [a*pow(r,i) for i in range(n+1)]
    # round down to nearest sample point (every 100 generations)
    series = [int(round(v/100)*100) for v in series]
    # sanity checks.
    assert(max(series) <= env['LONGEVITY'])	# not too big
    assert(len(set(series)) == len(series)) # no duplicates
    # print("Recipient timepoints = {}".format(",".join(map(str,sorted(series)))))
    return(series)

recipient_timepoints = calculate_recipient_timepoints(env)

def recipient_label(n):
    return "rtsi_"+str(n)
n.add('recipient_time_since_transmission', recipient_timepoints, label_func=recipient_label)


# For each data set, we evaluated both strict and relaxed uncorrelated lognormal clock models.
# These are captured in the different template files used to build the BEAST configs.
#
# See: McCloskey, R. M., Liang, R. H., Harrigan, P. R., Brumme, Z. L.,
# & Poon, A. F. Y. (2014). An Evaluation of Phylogenetic Methods for
# Reconstructing Transmitted HIV Variants using Longitudinal Clonal
# HIV Sequence Data. Journal of Virology, 88(11),
# 6181â€“94. doi:10.1128/JVI.00483-14

n.add('clock_model', ['relaxed'], create_dir=False)	# 'strict'


# Sample from the donor lineage.
# Sometimes we intentionaly do not include any donor information (nodonor).
#
# 'test -s' to make sure the output file is not empty.  We were having a
# problem where a sampling pattern for donor timepoint 0 was not actually
# pulling any donor info.  That will cause the build to fail if it happens
# again.


@w.add_target_with_env(env)
def donor_sample(env, outdir, c):
    target = os.path.join(outdir, 'donor.fasta')
    
    if env['donortime'] != "nodonor":
        env['sampletime'] = env['donortime']+env['transmission']
        cmd = '../bin/fasta_sample.py --fasta-file ${SOURCES[0]} --n-sequences 10 --pattern "_${sampletime}_" >${TARGET} && test -s ${TARGET}'
    else:
        cmd = ('>${TARGET}')
    return env.Command(target,
                       [ c['donorlineage'] ],
                       cmd)



@w.add_target_with_env(env)
def recipient_sample(env, outdir, c):
    target = os.path.join(outdir, 'recipient.fasta')
    
    cmd = ('../bin/fasta_sample.py --fasta-file ${SOURCES[0]} --n-sequences 10 --pattern "_${recipient_time_since_transmission}_" >${TARGET}')

    return env.Command(target,
                       [ c['recipientlineage'] ],
                       cmd)

# Create a multiple alignment from the sampled sequences.
# Note you don't hve to do this if all the sequences are the same length, but
# when indels are involved, you have to align them before calling beast.

@w.add_target_with_env(env)
def multiple_alignment(env, outdir, c):
    target = os.path.join(outdir, 'sequences.maf')
    
    cmd = ('cat ${SOURCES} | muscle -quiet -out ${TARGET}')

    return env.Command(target,
                       [ c['donor_sample'], c['recipient_sample'] ],
                       cmd)


# create the BEAST config file from sequences extracted from two patient simulations
@w.add_target_with_env(env)
def config_beast(env, outdir, c):
    target = os.path.join(outdir, 'beast_in.xml')
        
    cmd = ("mkbeast.py  --template  ${SOURCES[0]} ${SOURCES[1]}  >${TARGET}")

    return env.Command(target,
                       [ '../templates/${clock_model}-clock.xml', c['multiple_alignment']],
                       cmd)


@w.add_target_with_env(env)
def runbeast(env, outdir, c):
    target = [ os.path.join(outdir, 'ancestralSequences.log'),
               os.path.join(outdir, 'beastout.log'),
               os.path.join(outdir, 'beastout.trees'),
               os.path.join(outdir, 'beastcmd.log') ]
    return env.Command(target,
                       c['config_beast'],
                       "srun --output=srun.log beast -working -overwrite -beagle " + os.path.abspath(str(c['config_beast'][0])) + " >${TARGETS[3]} 2>&1 && while [ ! -s ${TARGETS[0]} ]; do echo waiting for ${TARGETS[0]}; sleep 2; done")

@w.add_target_with_env(env)
def mcc(env, outdir, c):
    return env.Command(os.path.join(outdir, 'mcc.tree'),
                        c['runbeast'][2],
                       'treeannotator ${SOURCES} >${TARGET} ')

@w.add_target_with_env(env)
def prank_guidetree(env, outdir, c):
    return env.Command(os.path.join(outdir, 'guidetree.tree'),
                        c['mcc'],
                       'nexus2newick.py ${SOURCES} | tr -d "\047" >${TARGET} ')

@w.add_target_with_env(env)
def print_dna(env, outdir, c):
    outdir = os.path.join(outdir, 'prank_dna')
    target = [ os.path.join(outdir, 'prank.best.anc.fas'),
               os.path.join(outdir, 'prankcmd.log') ]

    env['output'] = os.path.join(outdir, 'prank')
    cmd = ("srun prank -d=${SOURCES[0]} -t=${SOURCES[1]} -o=${output} -quiet -once -f=fasta -showanc -showtree -showevents -DNA >${TARGETS[1]} 2>&1 && while [ ! -s ${TARGETS[0]} ]; do echo waiting for ${TARGETS[0]}; sleep 2; done")
    return env.Command(target,
                       [ c['multiple_alignment'], c['prank_guidetree'] ],
                       [
                           Mkdir(outdir),
                           cmd
                       ])


# https://github.com/cswarth/hiv-sim/issues/2
# Try out codon PRANK
@w.add_target_with_env(env)
def prank_codon(env, outdir, c):
    outdir = os.path.join(outdir, 'prank_codon')
    target = [ os.path.join(outdir, 'prank.best.anc.fas'),
               os.path.join(outdir, 'prankcmd.log') ]

    env['output'] = os.path.join(outdir, 'prank')
    cmd = ("srun prank -d=${SOURCES[0]} -t=${SOURCES[1]} -o=${output} -quiet -once -f=fasta -showanc -showtree -showevents -DNA -codon >${TARGETS[1]} 2>&1 && while [ ! -s ${TARGETS[0]} ]; do echo waiting for ${TARGETS[0]}; sleep 2; done")
    return env.Command(target,
                       [ c['multiple_alignment'], c['prank_guidetree'] ],
                       [
                           Mkdir(outdir),
                           cmd
                       ])


# @w.add_target_with_env(env)
# def beast_distance(env, outdir, c):
#     detail = os.path.join(outdir, 'beast_distance.csv')
#     return env.Command([detail], 
#                        [c['founder'], c['runbeast'][0]],
#                        "distance.py  ${SOURCES} >${TARGETS[0]} ")[0]

# aggregate the individual summary distance files into one single file
# env.Command(['distances.csv'],
#     [i['distance'] for _, i in w],
#     'aggregate_distance.r ${SOURCES} >${TARGET}')
