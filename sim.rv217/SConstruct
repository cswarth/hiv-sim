#!/usr/bin/env scons
# -*- coding: utf-8 -*-

'''
Measure the performance of Prank over various numbers of sequences.

We want to know how the performance of Prank scales with the number of sequence being aligned.

For this SConstruct file, we select sequences from a large pool
distributed as part of the VIDD HIV founder bakeoff.  Under the mistaken
belief that part of the sequence ID indicated template abundance, we
sub-sampled according to the multinomial distribution of "abundances".
Actually the last component of the sequence ID indicates how many
sequences were binned to the same primer ID, *not* template abundance,
so this selection methodology is bogus.  The performance measures,
however, are useful and relevant.

There is a R/Jupyter notebook in
stoat:~/Notebooks/cwarth/VIDD-HIV/prank%20performance.R.ipynb for
parsing and plotting these results.
'''



# Simulations for lcfit
import os
import os.path
import glob
import tempfile

from nestly import Nest
from nestly.scons import SConsWrap
from SCons.Script import Environment
from SCons.Action import ActionFactory

environ = os.environ.copy()

env = Environment(ENV=environ)
env.PrependENVPath('PATH', '../bin')
env['PRANK']='/home/cwarth/src/matsen/prank/src/prank'
env['SANTAJAR']= os.path.expanduser('~matsengrp/local/lib/santa.jar')
env['SANTAJAR']= os.path.expanduser('~/src/matsen/santa-dev/dist/santa.jar')

env['LONGEVITY'] = 25000	# number of generations to run SANTA simulation.
env['POPULATION'] = 1000	# static simulated population size

n = Nest(base_dict={})
w = SConsWrap(n, 'build', alias_environment=env)

n.add('mutationrate', ['2.5E-5', '1.0E-5'])
#n.add('mutationrate', ['2.5E-5'])

n.add('model', ['indel', 'noindel', 'purifying_noindel',  'frequency_noindel'])
#n.add('model', ['indel', 'noindel', 'purifying_indel', 'purifying_noindel', 'frequency_indel', 'frequency_noindel'])
#n.add('model', ['indel'])


@w.add_target_with_env(env)
def santa_config(env, outdir, c):
    return env.Command(os.path.join(outdir, "santa_config.xml"),
                       ['../templates/vidd_{model}_template.xml'.format(**c), '../templates/HIV1C2C3.fasta'],
                       "mksanta.py  -p patient1 ${SOURCES}   >${TARGET}")[0]


# Function to be called to convert each value to a directory label.
def replicate(n):
    return "replicate_"+str(n)

n.add('replicates', range(5), label_func=replicate)

@w.add_target_with_env(env)
def santa_lineage(env, outdir, c):
    return env.Command(os.path.join(outdir, "donorlineage.fa"),
                       [ c['santa_config'], env['SANTAJAR'] ],
                       [  # santa will produce output files in its current directory.
                          # so need to change to output directory before execution.
                          Copy('${OUTDIR}/santa_config.xml', '${SOURCES[0]}'),
                          'cd ${OUTDIR} && srun --output=srun.log java -mx512m -jar ${SOURCES[1]} -mutationrate=${mutationrate} -population=${POPULATION} -longevity=${LONGEVITY} santa_config.xml',
                          Copy('${TARGET}', '${OUTDIR}/santa_out.fa')
                       ])[0]

n.add('transmission', [700, 900, 1000, 1200, 1500, 5000,  20000])
#n.add('transmission', [700], create_dir=False)

## Extract the founder sequence from the santa config file into a FASTA file.
## This makes it easier for the distance.py script to grab it for comparison.
@w.add_target_with_env(env)
def sample(env, outdir, c):
    founder = os.path.join(outdir, 'sample.fa'.format(**c))
    cmd = ('fasta_sample.py --fasta-file ${SOURCES[0]} --n-sequences 12 --pattern "_${transmission}_" >${TARGET}')

    return env.Command(founder,
                [ c['santa_lineage'] ],
                [ cmd ])[0]


# align sample
@w.add_target_with_env(env)
def multiple_alignment(env, outdir, c):
    #founder = os.path.join(outdir, 'sample_dedup_aln.fa'.format(**c))
    target = '{}_aln.fa'.format(os.path.splitext(str(c['sample']))[0])
    cmd = 'mafft --quiet --auto ${SOURCE} >${TARGET}'

    return env.Command(target,
                [ c['sample'] ],
                [ cmd ])



# create the BEAST config file from sequences extracted from two patient simulations
@w.add_target_with_env(env)
def config_beast(env, outdir, c):
    target = os.path.join(outdir, 'beast_in.xml')
        
    cmd = ("mkbeast.py  --template  ${SOURCES[0]} ${SOURCES[1]}  >${TARGET}")

    return env.Command(target,
                       [ '../templates/relaxed-clock.xml', c['multiple_alignment']],
                       cmd)


@w.add_target_with_env(env)
def runbeast(env, outdir, c):
    target = [ os.path.join(outdir, 'ancestralSequences.log'),
               os.path.join(outdir, 'beastout.log'),
               os.path.join(outdir, 'beastout.trees'),
               os.path.join(outdir, 'beastcmd.log') ]
    return env.Command(target,
                       c['config_beast'],
                       "srun --output=srun.log beast -working -overwrite -beagle " + os.path.abspath(str(c['config_beast'][0])) + " >${TARGETS[3]} 2>&1 && while [ ! -s ${TARGETS[0]} ]; do echo waiting for ${TARGETS[0]}; sleep 2; done")

@w.add_target_with_env(env)
def mcc(env, outdir, c):
    return env.Command(os.path.join(outdir, 'mcc.tree'),
                        c['runbeast'][2],
                       'treeannotator ${SOURCES} >${TARGET} ')

# nexus2newick fails to parse node names with '/' in them.
# prank fails to parse newick trees sith "'" (\047) in them
@w.add_target_with_env(env)
def prank_guidetree(env, outdir, c):
    return env.Command(os.path.join(outdir, 'guidetree.tree'),
                        c['mcc'],
                       'tr  "/" "-" <${SOURCES} | nexus2newick.py  | tr "-" "/" | tr -d "\047" >${TARGET} ')

@w.add_target_with_env(env)
def prank_dna(env, outdir, c):
    outdir = os.path.join(outdir, 'prank_dna')
    target = [ os.path.join(outdir, 'prank.best.anc.fas'),
               os.path.join(outdir, 'prankcmd.log') ]

    env['output'] = os.path.join(outdir, 'prank')
    cmd = ("srun prank -d=${SOURCES[0]} -t=${SOURCES[1]} -o=${output} -quiet -once -f=fasta -showanc -showtree -showevents -DNA >${TARGETS[1]} 2>&1 && while [ ! -s ${TARGETS[0]} ]; do echo waiting for ${TARGETS[0]}; sleep 2; done")
    return env.Command(target,
                       [ c['multiple_alignment'], c['prank_guidetree'] ],
                       [
                           Mkdir(outdir),
                           cmd
                       ])


# https://github.com/cswarth/hiv-sim/issues/2
# Try out codon PRANK
@w.add_target_with_env(env)
def prank_codon(env, outdir, c):
    outdir = os.path.join(outdir, 'prank_codon')
    target = [ os.path.join(outdir, 'prank.best.anc.fas'),
               os.path.join(outdir, 'prankcmd.log') ]

    env['output'] = os.path.join(outdir, 'prank')
    cmd = ("srun prank -d=${SOURCES[0]} -t=${SOURCES[1]} -o=${output} -quiet -once -f=fasta -showanc -showtree -showevents -codon >${TARGETS[1]} 2>&1 && while [ ! -s ${TARGETS[0]} ]; do echo waiting for ${TARGETS[0]}; sleep 2; done")
    return env.Command(target,
                       [ c['multiple_alignment'], c['prank_guidetree'] ],
                       [
                           Mkdir(outdir),
                           cmd
                       ])[0]


# # Align the sequences to an HIV-1 full-length reference.
# # The bam file produced by codon-sw cannot be imported into
# # IGV. I have not investiated in depth other than to note that
# # if we convert the bam file to SAM, then back to BAM, it seems
# # to then import into IGV without problems.
# @w.add_target_with_env(env)
# def bamfile(env, outdir, c):
#     target = os.path.join(outdir, 'sample.bam')
#     return env.Command(target,
#                        [ c['sample'] ],
#                        [
#                            '~/overbaugh/prep_drm/bin/codon-sw -hpfs -7 -q  references/NC_001802.fasta ${{SOURCE}} {outdir}/temp;'.format(outdir=outdir),
#                            #'samtools view -bSh  <(samtools view -h {outdir}/temp) >${{TARGET}};'.format(outdir=outdir),
#                            'samtools view -h {outdir}/temp | samtools view -bSh - >${{TARGET}};'.format(outdir=outdir),
#                            'rm -f {outdir}/temp'.format(outdir=outdir)
#                        ])


# @w.add_target_with_env(env)
# def sortedbam(env, outdir, c):
#     target = os.path.join(outdir, 'sample.sorted.bam')
#     return env.Command(target,
#                        [ c['bamfile'] ],
#                        [ 
#                          'samtools sort ${{SOURCE}} {}'.format(os.path.splitext(target)[0])
#                        ])



# @w.add_target_with_env(env)
# def bamindex(env, outdir, c):
#     index = os.path.join(outdir, 'sample.sorted.bam.bui')
#     return env.Command(index,
#                        [ c['sortedbam'] ],
#                        [ 'samtools index ${SOURCE}' ])

    

