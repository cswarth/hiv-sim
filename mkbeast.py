#!/usr/bin/python
# make a new BEAST  config file by inserting FASTA sequences into a generic template.
#
# csw 6/3/2014
# The way to use this script:
#
#      mkbeast.py -p foo template.xml sequences.fasta  >beast_in.xml
#
# This will take the fasta sequences and insert them into template.xml
# to produce an XML file that is suitable to pass to BEAST.  The
# prefix "foo" is used to configure the names of the BEAST output
# files.
#
# The fasta sequences should have been generated by a simulation or
# from patients.  Each sequence is expected to have a label like
# "patient1_200_3" which is laid out as
# "<prefix>_<generation>_<index>".  The <generation> is used as a tip
# date when configuring BEAST.
#
# Once the BEAST config file is generated, you would run,
#
#      beast beast_in.xml
#
# This will produce various output files, among which is foo.trees.
# That file gets fed to the 'annotatetrees' program and the output of that gets
# visualized with 'figtree'.
#
from __future__ import print_function

from lxml import etree
import re
from Bio import SeqIO

import sys, getopt

def main(argv):
    inputfile = ''
    outputfile = ''
    prefix = None
    try:
        opts, args = getopt.getopt(argv,"hp:",["prefix="])
    except getopt.GetoptError:
        print('mkbeast.py [-p <prefix>] <templatefile> <fastafile>', file=sys.stderr)
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print('mkbeast.py [-p <prefix>] <templatefile> <fastafile>', file=sys.stderr)
            sys.exit()
        elif opt in ("-p", "--prefix"):
            prefix = arg

    templatefile = args[0]
    datafiles = args[1:]

    # Parse a generic template and insert sequences from a FASTA file into the middle, separated by the appropriate XML tags.

    tree = etree.parse(templatefile)

    # Look for the taxa tag
    # fill it in with taxon definitions
    taxa = tree.find("taxa")
    taxa.clear()
    taxa.set('id', 'taxa')

    # Look for the alignment tag
    # fill it in with sequence definitions
    alignment = tree.find("alignment")
    alignment.clear()
    alignment.set('id', "alignment")
    alignment.set('dataType', "nucleotide")

    # extract the generation number from the sequence id string.
    # we use this to provide tip dates to BEAST.
    date_regex = re.compile("(?<=_)(?P<value>.*)(?=_)")

    # for each fasta sequence in the data file, create a taxon node and a sequence node.
    for datafile in datafiles:
        with open(datafile, "rU") as handle:
            for record in SeqIO.parse(handle, "fasta") :
                match = date_regex.search(record.id)
                date = etree.Element("date", value=match.group('value'), direction="forwards", units="days")
                date.tail = "\n"
                taxon = etree.Element("taxon", id=record.id)
                taxon.text = "\n"
                taxon.append(date)
                taxon.tail = "\n"
                taxa.append(taxon)
                
                taxon = etree.Element("taxon", idref=record.id)
                taxon.tail = str(record.seq) + "\n"
                sequence = etree.Element("sequence")
                sequence.append(taxon)
                sequence.tail="\n"
                alignment.append(sequence)


    if (prefix is not None):
        log = tree.find(".//log")
        if (log is not None):
            log.set("fileName", '{0}.log'.format(prefix))
        logtree = tree.find(".//logTree")
        if (logtree is not None):
            logtree.set("fileName", '{0}.trees'.format(prefix))
        mcmc = tree.find(".//mcmc")
        if (mcmc is not None):
            mcmc.set("operatorAnalysis", '{0}.ops'.format(prefix))
        
    print(etree.tostring(tree, pretty_print=True))


if __name__ == "__main__":
   main(sys.argv[1:])
   


